%%sh
cat > pi-mpi.c << EOF
#include <mpi.h>
#include <stdio.h>
#include <math.h>
int main(int argc, char *argv[])
{
int p; // p-numer procesu
float PI=0.0;
float A=1;
int n;
int tag=50;
float k;
float Wynik; 
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &p);
MPI_Comm_size(MPI_COMM_WORLD, &n);
MPI_Status status;
if(p==0){ 
MPI_Send(&A, 1, MPI_INT ,p+1 ,tag, MPI_COMM_WORLD);
MPI_Send(&PI, 1, MPI_INT ,p+1 ,tag, MPI_COMM_WORLD);
MPI_Send(&Wynik, 1, MPI_INT ,p+1 ,tag, MPI_COMM_WORLD);
}
if((p>0)&&(p<n-1)){ // procesu od 1 do 9
/* odbiera dane od prosesu o jeden mniejszego */
MPI_Recv(&A, 1, MPI_INT, p-1, tag, MPI_COMM_WORLD, &status);
MPI_Recv(&PI, 1, MPI_INT, p-1, tag, MPI_COMM_WORLD, &status);
MPI_Recv(&Wynik, 1, MPI_INT, p-1, tag, MPI_COMM_WORLD, &status);
k=(-1);
Wynik=0;
for(int i=1;i<=A;i++){
k=k*(-1);
}
Wynik=k/(2*A-1);
A=A+1;
PI=PI+Wynik;
printf("np procesu: %d, licznik: %f, Wynik: %f, PI: %f\n", p, k, Wynik, PI*4);
if(p!=n-1){ // proces 9 (ostatni) nie bÄ™dzie wysylany dalej
/* po wykonaniu obliczeni wysyla wyniki do procesu o 1 wiekszego */
MPI_Send(&A, 1, MPI_INT,p+1,tag,MPI_COMM_WORLD);
MPI_Send(&PI, 1, MPI_INT,p+1,tag,MPI_COMM_WORLD);
MPI_Send(&Wynik, 1, MPI_INT,p+1,tag,MPI_COMM_WORLD);
}
}
MPI_Finalize();
return 0;
}
EOF
mpicc pi-mpi.c && mpirun -n 10 --allow-run-as-root a.out